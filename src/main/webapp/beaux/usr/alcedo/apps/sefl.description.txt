面向资源的设计
====================
每个资源(RESOURCE)都有独立的应用界面(RESOURCE_BLADE/RESOURCE_SLICE),界面的浏览模式(VIEW_MODE)可以在网格(GRID)与卡片(CARD)两种模式间自由切换。

网格设计(GRID UI DESIGN)。
卡片设计(CARD/BLADE/SLICE UI DESIGN)。
============================================================


面向功能模块的设计
====================
为满足功能模块设计的需求，设计了资源中枢(RESOURCE_HUB)，将多种资源集成在一起，由资源中枢展开到资源片。

./xxxHub/，对应资源中枢；

./xxxxxx/，对应相应的资源簇；
============================================================


应用程序结构分析
====================
以saleHub为例，应用程序主文件目录为
./saleHub/，
主目录下，主要由主程序代码文件SaleHub.js和UI代码文件XWindow.js构成。

主文件代码 SaleHub.js 继承自网页桌面系统Beaux(/beaux/)下应用程序库(/beaux/sys/desktop/)下的应用程序类application.js，所有应用程序都继承自该类，该类提供了执行该应用程序的入口方法main()。

UI代码类XWindow.js继承自桌面系统Beaux(/beaux/)下的视窗库xserver(/beaux/sys/xserver/)下的X视窗类XWindow.js，所有的窗口都继承自该类，该类提供了Beaux窗口UI部件。

其余的UI子部件可能继承自/beaux/usr/alcedo/widget/或者/beaux/widget/下的库类，大部分可能还是直接继承自ExtJS。
============================================================

权限设计
====================
不同的权限，资源界面是相同的；资源界面仅仅是一个展示数据的模板，权限不同，在服务器端获得的数据源视图是不同的，因此只要在服务器端设计好资源权限视图，到达前端界面，填充到数据展示模板，自然形成满足权限要求的资源视图。
============================================================
